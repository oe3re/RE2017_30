Microsoft (R) Macro Assembler Version 14.00.24218.2	    06/25/17 20:45:21
AddTwo.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

 = 002B7CD0			BUFFER_SIZE = 2850000

 00000000			.data
 00000000 00000000		data_size DWORD 0
 00000004 00000000		header_size DWORD 0
 00000008 00000000		pom1 DWORD 0; pomocna promenljiva za dohvatanje reci data
 0000000C 0000			bps WORD 0
 0000000E  002B7CD0 [		buffer BYTE BUFFER_SIZE DUP(0)
	    00
	   ]
 002B7CDE  002B7CD0 [		buffer2 BYTE BUFFER_SIZE DUP(0)
	    00
	   ]
 0056F9AE  00000050 [		filename    BYTE 80 DUP(0)
	    00
	   ]
 0056F9FE 69 6E 76 65 72	pom BYTE "invertovan_"
	   74 6F 76 61 6E
	   5F
 0056FA09 00000000		pom2 DWORD 0
 0056FA0D 00000000		pom3 DWORD 0
 0056FA11 00000000		samplerate DWORD 0
 0056FA15 00000000		ukupno_odb DWORD 0;bajtovski od
 0056FA19 00000000		ukupno_dob DWORD 0;bajtovski do
 0056FA1D  00000050 [		dstFilename BYTE 80 DUP(0)
	    00
	   ]
 0056FA6D 00000000		fileHandle  HANDLE ?


 0056FA71 00000000		minut DWORD 0
 0056FA75 00000000		sekunda DWORD 0
 0056FA79 00000000		ukupno_od DWORD 0
 0056FA7D 00000000		ukupno_do DWORD 0
 0056FA81 00000000		pocetak DWORD 0
 0056FA85 00000000		kraj DWORD 0
 0056FA89 00000000		bool DWORD 0
 0056FA8D 00000000		bool1 DWORD 0
 0056FA91 00000000		bool2 DWORD 0
 0056FA95 00000000		bool3 DWORD 0
 0056FA99 00000000		bool4 DWORD 0
 0056FA9D 00			charIn BYTE ?
 0056FA9E 00			celapesma BYTE 0
 0056FA9F 00			deopesme BYTE 0
 0056FAA0 00000000		prviput DWORD 0



 00000000			.code
 00000000			main PROC


					mWrite "Unesite ime fajla za obradu: "
 0056FAA4		     1		.data		
 0056FAA4 55 6E 65 73 69     1		??0000 BYTE "Unesite ime fajla za obradu: ",0	
	   74 65 20 69 6D
	   65 20 66 61 6A
	   6C 61 20 7A 61
	   20 6F 62 72 61
	   64 75 3A 20 00
 00000000		     1		.code
 00000000  52		     1		push	edx
 00000001  BA 0056FAA4 R     1		mov	edx,OFFSET ??0000
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop	edx
 0000000C  BA 0056F9AE R		mov	edx,OFFSET filename
 00000011  B9 00000050			mov	ecx,SIZEOF filename
 00000016  E8 00000000 E		call	ReadString


 0000001B  BA 0056F9AE R		mov	edx,OFFSET filename
 00000020  E8 00000000 E		call	OpenInputFile
 00000025  A3 0056FA6D R		mov	fileHandle,eax


 0000002A  83 F8 FF			cmp	eax,INVALID_HANDLE_VALUE; greska pri citanju fajla?
 0000002D  75 11			jne	file_ok; no: preskoci
					mWrite <"fajl ne moze biti otvoren.",0dh,0ah>
 0056FAC2		     1		.data		
 0056FAC2 66 61 6A 6C 20     1		??0001 BYTE "fajl ne moze biti otvoren.",0dh,0ah,0	
	   6E 65 20 6D 6F
	   7A 65 20 62 69
	   74 69 20 6F 74
	   76 6F 72 65 6E
	   2E 0D 0A 00
 0000002F		     1		.code
 0000002F  52		     1		push	edx
 00000030  BA 0056FAC2 R     1		mov	edx,OFFSET ??0001
 00000035  E8 00000000 E     1		call	WriteString
 0000003A  5A		     1		pop	edx
 0000003B  E9 00000496			jmp	quit; zavrsi
 00000040			file_ok:

				  ;Upisivanje fajla

 00000040  BA 0000000E R		mov	edx,OFFSET buffer
 00000045  B9 002B7CD0			mov	ecx,BUFFER_SIZE
 0000004A  E8 00000000 E		call	ReadFromFile
 0000004F  73 13			jnc	check_buffer_size; greska pri citanju?
					mWrite "Greska pri citanju fajla. "; yes: prikazi poruku greske
 0056FADF		     1		.data		
 0056FADF 47 72 65 73 6B     1		??0002 BYTE "Greska pri citanju fajla. ",0	
	   61 20 70 72 69
	   20 63 69 74 61
	   6E 6A 75 20 66
	   61 6A 6C 61 2E
	   20 00
 00000051		     1		.code
 00000051  52		     1		push	edx
 00000052  BA 0056FADF R     1		mov	edx,OFFSET ??0002
 00000057  E8 00000000 E     1		call	WriteString
 0000005C  5A		     1		pop	edx
 0000005D  E8 00000000 E		call	WriteWindowsMsg
 00000062  EB 35			jmp	close_file

 00000064				check_buffer_size:
 00000064  3D 002B7CD0			cmp	eax,BUFFER_SIZE; da li je alocirani bafer dovoljan
 00000069  72 11			jb	buf_size_ok; yes
					mWrite <"Bafer je suvise mali.",0dh,0ah>
 0056FAFA		     1		.data		
 0056FAFA 42 61 66 65 72     1		??0003 BYTE "Bafer je suvise mali.",0dh,0ah,0	
	   20 6A 65 20 73
	   75 76 69 73 65
	   20 6D 61 6C 69
	   2E 0D 0A 00
 0000006B		     1		.code
 0000006B  52		     1		push	edx
 0000006C  BA 0056FAFA R     1		mov	edx,OFFSET ??0003
 00000071  E8 00000000 E     1		call	WriteString
 00000076  5A		     1		pop	edx
 00000077  E9 0000045A			jmp	quit; izadji

 0000007C				buf_size_ok:
 0000007C  C6 80 0000000E R		mov	buffer[eax],0; upisujemo null
	   00
					mWrite "Velicina ucitanog fajla: "

 0056FB12		     1		.data		
 0056FB12 56 65 6C 69 63     1		??0004 BYTE "Velicina ucitanog fajla: ",0	
	   69 6E 61 20 75
	   63 69 74 61 6E
	   6F 67 20 66 61
	   6A 6C 61 3A 20
	   00
 00000083		     1		.code
 00000083  52		     1		push	edx
 00000084  BA 0056FB12 R     1		mov	edx,OFFSET ??0004
 00000089  E8 00000000 E     1		call	WriteString
 0000008E  5A		     1		pop	edx
 0000008F  E8 00000000 E		call	WriteDec; prikazi velicinu fajla
 00000094  E8 00000000 E		call	Crlf


 00000099			close_file:
 00000099  A1 0056FA6D R		mov	eax,fileHandle
 0000009E  E8 00000000 E		call	CloseFile

				;pravimo ime izlaznog fajla

 000000A3  B9 0000000B			mov ecx,lengthof pom;prvo smo ispisali "invertovan_" u dstFilename
 000000A8  BE 0056F9FE R		mov esi,offset pom
 000000AD  BF 0056FA1D R		mov edi,offset dstFilename
 000000B2  F3/ A4			rep movsb

				;zatim ispisujemo i ime ulaznog fajla

 000000B4  B9 00000050			mov ecx,lengthof filename
 000000B9  BE 0056F9AE R		mov esi,offset filename
 000000BE  BF 0056FA1D R		mov edi,offset dstFilename
 000000C3  83 C7 0B			add edi,lengthof pom
 000000C6  F3/ A4			rep movsb

				;trazimo velicinu HEDERA

 000000C8  33 C0			xor eax,eax
 000000CA  33 C9			xor ecx,ecx
 000000CC  33 DB			xor ebx,ebx
 000000CE  B8 61746164			mov	eax,1635017060; eax = data(ascii)
 000000D3  A3 0056FA0D R		mov pom3,eax

 000000D8  BE 0000000E R		mov esi,offset buffer
 000000DD			sledeci:
 000000DD  B9 00000004			mov ecx,4
 000000E2  BF 0056FA09 R		mov edi,offset pom2
 000000E7  F3/ A4			rep movsb
 000000E9  43				inc ebx
 000000EA  A1 0056FA09 R		mov eax,pom2
 000000EF  3B 05 0056FA0D R		cmp eax,pom3
 000000F5  74 05			je gotovo
 000000F7  4E				dec esi
 000000F8  4E				dec esi
 000000F9  4E				dec esi
 000000FA  E2 E1			loop sledeci

 000000FC			gotovo:
 000000FC  83 C3 06			add ebx,6
 000000FF  89 1D 00000004 R		mov header_size,ebx

				;trazimo velicinu data,ona pise na kraju hedera

 00000105  33 C9			xor ecx,ecx
 00000107  81 C1 0000000E R		add ecx,OFFSET buffer
 0000010D  03 0D 00000004 R		add ecx,header_size
 00000113  8A 21			mov ah,[ecx]
 00000115  49				dec ecx
 00000116  8A 01			mov al,[ecx]
 00000118  C1 E0 10			shl eax,16
 0000011B  49				dec ecx
 0000011C  8A 21			mov ah,[ecx]
 0000011E  49				dec ecx
 0000011F  8A 01			mov al,[ecx]
 00000121  A3 00000000 R		mov data_size,eax

				;trazimo velicinu sempla(1 ili 2 bajta) ona se uvek nalazi na 34. i 35. bajtu
				;hedera i upisujemo je u pomocnu promenljivu bps

 00000126  33 C0			xor eax,eax
 00000128  33 C9			xor ecx,ecx
 0000012A  81 C1 0000000E R		add ecx,OFFSET buffer
 00000130  83 C1 23			add ecx,35
 00000133  8A 21			mov ah,[ecx]
 00000135  49				dec ecx
 00000136  8A 01			mov al,[ecx]
 00000138  66| A3			mov bps,ax
	   0000000C R

				;trazimo samplerate
 0000013E  33 C0			xor eax,eax
 00000140  33 C9			xor ecx,ecx
 00000142  81 C1 0000000E R		add ecx,OFFSET buffer
 00000148  83 C1 19			add ecx,25
 0000014B  8A 21			mov ah,[ecx]
 0000014D  49				dec ecx
 0000014E  8A 01			mov al,[ecx]
 00000150  A3 0056FA11 R		mov samplerate,eax

				;pocetak interaktivnog menija

 00000155  33 D2			xor edx,edx
 00000157			ispocetka:
 00000157  E8 00000000 E		call Clrscr
 0000015C  33 C0			xor eax,eax
 0000015E  33 DB			xor ebx,ebx


 00000160  8B 15 0056FAA0 R		mov edx,prviput
 00000166  83 FA 00			cmp edx,0
 00000169  74 0C			je next
					mWrite <"Izaberite jednu od ponudjenih opcija!",0dh,0ah>
 0056FB2C		     1		.data		
 0056FB2C 49 7A 61 62 65     1		??0005 BYTE "Izaberite jednu od ponudjenih opcija!",0dh,0ah,0	
	   72 69 74 65 20
	   6A 65 64 6E 75
	   20 6F 64 20 70
	   6F 6E 75 64 6A
	   65 6E 69 68 20
	   6F 70 63 69 6A
	   61 21 0D 0A 00
 0000016B		     1		.code
 0000016B  52		     1		push	edx
 0000016C  BA 0056FB2C R     1		mov	edx,OFFSET ??0005
 00000171  E8 00000000 E     1		call	WriteString
 00000176  5A		     1		pop	edx
 00000177				next:
					mWrite <"Zelim da obrnem: ",0dh,0ah,"1.celu pesmu",0dh,0ah,"2.deo pesme",0dh,0ah>
 0056FB54		     1		.data		
 0056FB54 5A 65 6C 69 6D     1		??0006 BYTE "Zelim da obrnem: ",0dh,0ah,"1.celu pesmu",0dh,0ah,"2.deo pesme",0dh,0ah,0	
	   20 64 61 20 6F
	   62 72 6E 65 6D
	   3A 20 0D 0A 31
	   2E 63 65 6C 75
	   20 70 65 73 6D
	   75 0D 0A 32 2E
	   64 65 6F 20 70
	   65 73 6D 65 0D
	   0A 00
 00000177		     1		.code
 00000177  52		     1		push	edx
 00000178  BA 0056FB54 R     1		mov	edx,OFFSET ??0006
 0000017D  E8 00000000 E     1		call	WriteString
 00000182  5A		     1		pop	edx
 00000183  BA 00000001			mov edx,1
 00000188  89 15 0056FAA0 R		mov prviput,edx
 0000018E  E8 00000000 E		call ReadChar
 00000193  8A D8			mov bl,al
 00000195  80 FB 31			cmp bl,"1"
 00000198  75 0F			jne dalje

 0000019A  B8 00000001			mov eax,1
 0000019F  A2 0056FA9E R		mov celapesma,al
 000001A4  E9 00000276			jmp kraj1

 000001A9			dalje:
 000001A9  80 FB 32			cmp bl,"2"
 000001AC  75 A9			jne ispocetka
 000001AE  B8 00000001			mov eax,1
 000001B3  A2 0056FA9F R		mov deopesme,al
 000001B8  EB 00			jmp deo_pesme


 000001BA			deo_pesme:
 000001BA  E8 00000000 E		call Clrscr
					mWrite <"Unesite broj minuta i sekundi od kojeg zelite da invertujete.",0dh,0ah>
 0056FB83		     1		.data		
 0056FB83 55 6E 65 73 69     1		??0007 BYTE "Unesite broj minuta i sekundi od kojeg zelite da invertujete.",0dh,0ah,0	
	   74 65 20 62 72
	   6F 6A 20 6D 69
	   6E 75 74 61 20
	   69 20 73 65 6B
	   75 6E 64 69 20
	   6F 64 20 6B 6F
	   6A 65 67 20 7A
	   65 6C 69 74 65
	   20 64 61 20 69
	   6E 76 65 72 74
	   75 6A 65 74 65
	   2E 0D 0A 00
 000001BF		     1		.code
 000001BF  52		     1		push	edx
 000001C0  BA 0056FB83 R     1		mov	edx,OFFSET ??0007
 000001C5  E8 00000000 E     1		call	WriteString
 000001CA  5A		     1		pop	edx


					;Unos minuta i ispitivanje ispravnosti datog unosa

 000001CB			ispis_minuta:
 000001CB  33 C0			xor eax,eax
 000001CD  A1 0056FA99 R		mov eax,bool4
 000001D2  83 F8 01			cmp eax,1
 000001D5  74 02			je ispis_do_manje_nego_od
 000001D7  EB 0E			jmp dalje_4
 000001D9				ispis_do_manje_nego_od:
					mWrite <"Krajnji trenutak mora biti veci nego pocetni! ",0dh,0ah>
 0056FBC3		     1		.data		
 0056FBC3 4B 72 61 6A 6E     1		??0008 BYTE "Krajnji trenutak mora biti veci nego pocetni! ",0dh,0ah,0	
	   6A 69 20 74 72
	   65 6E 75 74 61
	   6B 20 6D 6F 72
	   61 20 62 69 74
	   69 20 76 65 63
	   69 20 6E 65 67
	   6F 20 70 6F 63
	   65 74 6E 69 21
	   20 0D 0A 00
 000001D9		     1		.code
 000001D9  52		     1		push	edx
 000001DA  BA 0056FBC3 R     1		mov	edx,OFFSET ??0008
 000001DF  E8 00000000 E     1		call	WriteString
 000001E4  5A		     1		pop	edx
 000001E5  EB 1D			jmp ispis_minuta1

 000001E7			dalje_4:
 000001E7  33 C0			xor eax,eax
 000001E9  A1 0056FA8D R		mov eax,bool1
 000001EE  83 F8 01			cmp eax,1
 000001F1  75 11			jne ispis_minuta1
 000001F3  E8 00000000 E		call Clrscr
					mWrite <"Broj minuta mora biti pozitivan broj i u toku trajanja pesme! Unesite ponovo!",0dh,0ah>
 0056FBF4		     1		.data		
 0056FBF4 42 72 6F 6A 20     1		??0009 BYTE "Broj minuta mora biti pozitivan broj i u toku trajanja pesme! Unesite ponovo!",0dh,0ah,0	
	   6D 69 6E 75 74
	   61 20 6D 6F 72
	   61 20 62 69 74
	   69 20 70 6F 7A
	   69 74 69 76 61
	   6E 20 62 72 6F
	   6A 20 69 20 75
	   20 74 6F 6B 75
	   20 74 72 61 6A
	   61 6E 6A 61 20
	   70 65 73 6D 65
	   21 20 55 6E 65
	   73 69 74 65 20
	   70 6F 6E 6F 76
	   6F 21 0D 0A 00
 000001F8		     1		.code
 000001F8  52		     1		push	edx
 000001F9  BA 0056FBF4 R     1		mov	edx,OFFSET ??0009
 000001FE  E8 00000000 E     1		call	WriteString
 00000203  5A		     1		pop	edx
 00000204				ispis_minuta1:
					mWrite <"Minut(pocetni): ",0dh,0ah>
 0056FC44		     1		.data		
 0056FC44 4D 69 6E 75 74     1		??000A BYTE "Minut(pocetni): ",0dh,0ah,0	
	   28 70 6F 63 65
	   74 6E 69 29 3A
	   20 0D 0A 00
 00000204		     1		.code
 00000204  52		     1		push	edx
 00000205  BA 0056FC44 R     1		mov	edx,OFFSET ??000A
 0000020A  E8 00000000 E     1		call	WriteString
 0000020F  5A		     1		pop	edx
 00000210  33 C0			xor eax,eax
 00000212  B8 00000001			mov eax,1
 00000217  A3 0056FA8D R		mov bool1,eax
 0000021C  33 C0			xor eax,eax
 0000021E  E8 00000000 E		call ReadInt
 00000223  A3 0056FA71 R		mov minut,eax
 00000228  83 F8 00			cmp eax,0
 0000022B  7C 9E			jl ispis_minuta
 0000022D  E8 00000000 E		call Clrscr
 00000232  EB 1D			jmp ispis_sekundi1


					;Unos sekundi i ispitivanje ispravnosti datog unosa

 00000234			ispis_sekundi:
 00000234  33 C0			xor eax,eax
 00000236  A1 0056FA89 R		mov eax,bool
 0000023B  83 F8 01			cmp eax,1
 0000023E  75 11			jne ispis_sekundi1
 00000240  E8 00000000 E		call Clrscr
					mWrite <"Broj sekundi mora biti u intervalu [0,59]! Unesite ponovo!",0dh,0ah>
 0056FC57		     1		.data		
 0056FC57 42 72 6F 6A 20     1		??000B BYTE "Broj sekundi mora biti u intervalu [0,59]! Unesite ponovo!",0dh,0ah,0	
	   73 65 6B 75 6E
	   64 69 20 6D 6F
	   72 61 20 62 69
	   74 69 20 75 20
	   69 6E 74 65 72
	   76 61 6C 75 20
	   5B 30 2C 35 39
	   5D 21 20 55 6E
	   65 73 69 74 65
	   20 70 6F 6E 6F
	   76 6F 21 0D 0A
	   00
 00000245		     1		.code
 00000245  52		     1		push	edx
 00000246  BA 0056FC57 R     1		mov	edx,OFFSET ??000B
 0000024B  E8 00000000 E     1		call	WriteString
 00000250  5A		     1		pop	edx
 00000251				ispis_sekundi1:
					mWrite <"Sekunda(pocetna): ",0dh,0ah>
 0056FC94		     1		.data		
 0056FC94 53 65 6B 75 6E     1		??000C BYTE "Sekunda(pocetna): ",0dh,0ah,0	
	   64 61 28 70 6F
	   63 65 74 6E 61
	   29 3A 20 0D 0A
	   00
 00000251		     1		.code
 00000251  52		     1		push	edx
 00000252  BA 0056FC94 R     1		mov	edx,OFFSET ??000C
 00000257  E8 00000000 E     1		call	WriteString
 0000025C  5A		     1		pop	edx
 0000025D  33 C0			xor eax,eax
 0000025F  B8 00000001			mov eax,1
 00000264  A3 0056FA89 R		mov bool,eax
 00000269  33 C0			xor eax,eax
 0000026B  E8 00000000 E		call ReadInt
 00000270  A3 0056FA75 R		mov sekunda,eax
 00000275  83 F8 3B			cmp eax,59
 00000278  7F BA			jg ispis_sekundi
 0000027A  83 F8 00			cmp eax,0
 0000027D  7C B5			jl ispis_sekundi
 0000027F  EB 00			jmp sabiranje


 00000281			sabiranje:
 00000281  33 C9			xor ecx,ecx
 00000283  33 DB			xor ebx,ebx
 00000285  8B 1D 0056FA75 R		mov ebx,sekunda
 0000028B  33 C0			xor eax,eax
 0000028D  A1 0056FA71 R		mov eax,minut
 00000292  B9 0000003C			mov ecx,60
 00000297  F7 E1			mul ecx
 00000299  03 D8			add ebx,eax
 0000029B  89 1D 0056FA79 R		mov ukupno_od,ebx
 000002A1  EB 00			jmp deo_pesme1



					;Unos krajnje tacke intervala

 000002A3			deo_pesme1:
 000002A3  E8 00000000 E		call Clrscr
					mWrite <"Unesite broj minuta i sekundi do kojeg zelite da invertujete.",0dh,0ah>
 0056FCA9		     1		.data		
 0056FCA9 55 6E 65 73 69     1		??000D BYTE "Unesite broj minuta i sekundi do kojeg zelite da invertujete.",0dh,0ah,0	
	   74 65 20 62 72
	   6F 6A 20 6D 69
	   6E 75 74 61 20
	   69 20 73 65 6B
	   75 6E 64 69 20
	   64 6F 20 6B 6F
	   6A 65 67 20 7A
	   65 6C 69 74 65
	   20 64 61 20 69
	   6E 76 65 72 74
	   75 6A 65 74 65
	   2E 0D 0A 00
 000002A8		     1		.code
 000002A8  52		     1		push	edx
 000002A9  BA 0056FCA9 R     1		mov	edx,OFFSET ??000D
 000002AE  E8 00000000 E     1		call	WriteString
 000002B3  5A		     1		pop	edx


					;Unos minuta i ispitivanje ispravnosti datog unosa

 000002B4			ispis_minuta3:
 000002B4  33 C0			xor eax,eax
 000002B6  A1 0056FA91 R		mov eax,bool2
 000002BB  83 F8 01			cmp eax,1
 000002BE  75 11			jne ispis_minuta2
 000002C0  E8 00000000 E		call Clrscr
					mWrite <"Broj minuta mora biti pozitivan broj i u toku trajanja pesme! Unesite ponovo!",0dh,0ah>
 0056FCE9		     1		.data		
 0056FCE9 42 72 6F 6A 20     1		??000E BYTE "Broj minuta mora biti pozitivan broj i u toku trajanja pesme! Unesite ponovo!",0dh,0ah,0	
	   6D 69 6E 75 74
	   61 20 6D 6F 72
	   61 20 62 69 74
	   69 20 70 6F 7A
	   69 74 69 76 61
	   6E 20 62 72 6F
	   6A 20 69 20 75
	   20 74 6F 6B 75
	   20 74 72 61 6A
	   61 6E 6A 61 20
	   70 65 73 6D 65
	   21 20 55 6E 65
	   73 69 74 65 20
	   70 6F 6E 6F 76
	   6F 21 0D 0A 00
 000002C5		     1		.code
 000002C5  52		     1		push	edx
 000002C6  BA 0056FCE9 R     1		mov	edx,OFFSET ??000E
 000002CB  E8 00000000 E     1		call	WriteString
 000002D0  5A		     1		pop	edx
 000002D1				ispis_minuta2:
					mWrite <"Minut(krajnji): ",0dh,0ah>
 0056FD39		     1		.data		
 0056FD39 4D 69 6E 75 74     1		??000F BYTE "Minut(krajnji): ",0dh,0ah,0	
	   28 6B 72 61 6A
	   6E 6A 69 29 3A
	   20 0D 0A 00
 000002D1		     1		.code
 000002D1  52		     1		push	edx
 000002D2  BA 0056FD39 R     1		mov	edx,OFFSET ??000F
 000002D7  E8 00000000 E     1		call	WriteString
 000002DC  5A		     1		pop	edx
 000002DD  33 C0			xor eax,eax
 000002DF  B8 00000001			mov eax,1
 000002E4  A3 0056FA91 R		mov bool2,eax
 000002E9  33 C0			xor eax,eax
 000002EB  E8 00000000 E		call ReadInt
 000002F0  A3 0056FA71 R		mov minut,eax
 000002F5  83 F8 00			cmp eax,0
 000002F8  7C BA			jl ispis_minuta3
 000002FA  E8 00000000 E		call Clrscr
 000002FF  EB 1D			jmp ispis_sekundi2


				;Unos sekundi i ispitivanje ispravnosti datog unosa

 00000301			ispis_sekundi3:
 00000301  33 C0			xor eax,eax
 00000303  A1 0056FA95 R		mov eax,bool3
 00000308  83 F8 01			cmp eax,1
 0000030B  75 11			jne ispis_sekundi2
 0000030D  E8 00000000 E		call Clrscr
					mWrite <"Broj sekundi mora biti u intervalu [0,59]! Unesite ponovo!",0dh,0ah>
 0056FD4C		     1		.data		
 0056FD4C 42 72 6F 6A 20     1		??0010 BYTE "Broj sekundi mora biti u intervalu [0,59]! Unesite ponovo!",0dh,0ah,0	
	   73 65 6B 75 6E
	   64 69 20 6D 6F
	   72 61 20 62 69
	   74 69 20 75 20
	   69 6E 74 65 72
	   76 61 6C 75 20
	   5B 30 2C 35 39
	   5D 21 20 55 6E
	   65 73 69 74 65
	   20 70 6F 6E 6F
	   76 6F 21 0D 0A
	   00
 00000312		     1		.code
 00000312  52		     1		push	edx
 00000313  BA 0056FD4C R     1		mov	edx,OFFSET ??0010
 00000318  E8 00000000 E     1		call	WriteString
 0000031D  5A		     1		pop	edx
 0000031E				ispis_sekundi2:
					mWrite <"Sekunda(krajnja): ",0dh,0ah>
 0056FD89		     1		.data		
 0056FD89 53 65 6B 75 6E     1		??0011 BYTE "Sekunda(krajnja): ",0dh,0ah,0	
	   64 61 28 6B 72
	   61 6A 6E 6A 61
	   29 3A 20 0D 0A
	   00
 0000031E		     1		.code
 0000031E  52		     1		push	edx
 0000031F  BA 0056FD89 R     1		mov	edx,OFFSET ??0011
 00000324  E8 00000000 E     1		call	WriteString
 00000329  5A		     1		pop	edx
 0000032A  33 C0			xor eax,eax
 0000032C  B8 00000001			mov eax,1
 00000331  A3 0056FA95 R		mov bool3,eax
 00000336  33 C0			xor eax,eax
 00000338  E8 00000000 E		call ReadInt
 0000033D  A3 0056FA75 R		mov sekunda,eax
 00000342  83 F8 3B			cmp eax,59
 00000345  7F BA			jg ispis_sekundi3
 00000347  83 F8 00			cmp eax,0
 0000034A  7C B5			jl ispis_sekundi3
 0000034C  EB 00			jmp sabiranje1


 0000034E			sabiranje1:
 0000034E  33 C9			xor ecx,ecx
 00000350  33 DB			xor ebx,ebx
 00000352  8B 1D 0056FA75 R		mov ebx,sekunda
 00000358  33 C0			xor eax,eax
 0000035A  A1 0056FA71 R		mov eax,minut
 0000035F  B9 0000003C			mov ecx,60
 00000364  F7 E1			mul ecx
 00000366  03 D8			add ebx,eax
 00000368  89 1D 0056FA7D R		mov ukupno_do,ebx;
 0000036E  EB 00			jmp kraj2
 00000370			kraj2:
 00000370  E8 00000000 E		call Clrscr
					mWrite <"Validan unos!",0dh,0ah>
 0056FD9E		     1		.data		
 0056FD9E 56 61 6C 69 64     1		??0012 BYTE "Validan unos!",0dh,0ah,0	
	   61 6E 20 75 6E
	   6F 73 21 0D 0A
	   00
 00000375		     1		.code
 00000375  52		     1		push	edx
 00000376  BA 0056FD9E R     1		mov	edx,OFFSET ??0012
 0000037B  E8 00000000 E     1		call	WriteString
 00000380  5A		     1		pop	edx
					mWrite <"Izvrsena je konverzija dela pesme!",0dh,0ah>
 0056FDAE		     1		.data		
 0056FDAE 49 7A 76 72 73     1		??0013 BYTE "Izvrsena je konverzija dela pesme!",0dh,0ah,0	
	   65 6E 61 20 6A
	   65 20 6B 6F 6E
	   76 65 72 7A 69
	   6A 61 20 64 65
	   6C 61 20 70 65
	   73 6D 65 21 0D
	   0A 00
 00000381		     1		.code
 00000381  52		     1		push	edx
 00000382  BA 0056FDAE R     1		mov	edx,OFFSET ??0013
 00000387  E8 00000000 E     1		call	WriteString
 0000038C  5A		     1		pop	edx


					;trazenje ukupno_odb do b

 0000038D  33 C0			xor eax,eax
 0000038F  33 D2			xor edx,edx
 00000391  BB 00000008			mov ebx,8
 00000396  03 05 0056FA79 R		add eax,ukupno_od
 0000039C  66| F7 2D			imul bps
	   0000000C R
 000003A3  F7 2D 0056FA11 R		imul samplerate
 000003A9  F7 FB			idiv ebx

 000003AB  A3 0056FA15 R		mov ukupno_odb,eax

 000003B0  33 C0			xor eax,eax
 000003B2  33 D2			xor edx,edx
 000003B4  03 05 0056FA7D R		add eax,ukupno_do
 000003BA  66| F7 2D			imul bps
	   0000000C R
 000003C1  F7 2D 0056FA11 R		imul samplerate
 000003C7  F7 FB			idiv ebx

 000003C9  A3 0056FA19 R		mov ukupno_dob,eax

 000003CE  33 DB			xor ebx,ebx
 000003D0  33 C0			xor eax,eax
 000003D2  A1 0056FA15 R		mov eax,ukupno_odb
 000003D7  8B 1D 00000000 R		mov ebx,data_size
 000003DD  3B C3			cmp eax,ebx
 000003DF  0F 8F FFFFFDD5		jg deo_pesme

 000003E5  33 DB			xor ebx,ebx
 000003E7  33 C0			xor eax,eax
 000003E9  A1 0056FA19 R		mov eax,ukupno_dob
 000003EE  8B 1D 00000000 R		mov ebx,data_size
 000003F4  3B C3			cmp eax,ebx
 000003F6  0F 8F FFFFFDBE		jg deo_pesme

 000003FC  33 DB			xor ebx,ebx
 000003FE  33 C0			xor eax,eax
 00000400  C7 05 0056FA99 R		mov bool4,1;		promenljiva bool4 sluzi za proveru da li je ukupno_odb < ukupno_dob
	   00000001
 0000040A  A1 0056FA19 R		mov eax,ukupno_dob
 0000040F  8B 1D 0056FA15 R		mov ebx,ukupno_odb
 00000415  3B C3			cmp eax,ebx
 00000417  0F 8C FFFFFD9D		jl deo_pesme
						
 0000041D  EB 22			jmp unos_pesme


 0000041F			kraj1:
 0000041F  E8 00000000 E		call Clrscr
					mWrite <"Izvrsena je konverzija cele pesme!",0dh,0ah>
 0056FDD3		     1		.data		
 0056FDD3 49 7A 76 72 73     1		??0014 BYTE "Izvrsena je konverzija cele pesme!",0dh,0ah,0	
	   65 6E 61 20 6A
	   65 20 6B 6F 6E
	   76 65 72 7A 69
	   6A 61 20 63 65
	   6C 65 20 70 65
	   73 6D 65 21 0D
	   0A 00
 00000424		     1		.code
 00000424  52		     1		push	edx
 00000425  BA 0056FDD3 R     1		mov	edx,OFFSET ??0014
 0000042A  E8 00000000 E     1		call	WriteString
 0000042F  5A		     1		pop	edx
 00000430  33 C0			xor eax,eax
 00000432  BB 00000008			mov ebx,8
 00000437  A1 00000000 R		mov eax,data_size
 0000043C  A3 0056FA19 R		mov ukupno_dob,eax

 00000441			unos_pesme:

					;kopiramo header fajla(prvih header_size bajta iz bafera) u buffer2

 00000441  FC				cld
 00000442  8B 0D 00000004 R		mov ecx,header_size
 00000448  BE 0000000E R		mov esi,OFFSET buffer
 0000044D  BF 002B7CDE R		mov edi,OFFSET buffer2
 00000452  F3/ A4			rep movsb


 00000454  33 FF			xor edi,edi
 00000456  33 F6			xor esi,esi
 00000458  33 C9			xor ecx,ecx

 0000045A  FC				cld

					;vrsimo obrnut upis semplova u deo bafera nakon hedera

 0000045B  BE 0000000E R		mov esi,OFFSET buffer
 00000460  03 35 00000004 R		add esi,header_size
 00000466  03 35 0056FA15 R		add esi,ukupno_odb
 0000046C  46				inc esi
 0000046D  BF 002B7CDE R		mov edi,OFFSET buffer2
 00000472  03 3D 00000004 R		add edi,header_size
 00000478  47				inc edi
 00000479  03 3D 0056FA19 R		add edi,ukupno_dob
 0000047F  2B 3D 0056FA15 R		sub edi,ukupno_odb

 00000485  03 0D 0056FA19 R		add ecx,ukupno_dob
 0000048B  2B 0D 0056FA15 R		sub ecx,ukupno_odb

 00000491  33 C0			xor eax,eax
 00000493  66| B8 0008			mov	ax,8
 00000497  66| 3B 05			cmp	ax,bps
	   0000000C R
 0000049E  75 07			jne	dvabajta
 000004A0				next10:
 000004A0  4F				dec edi
 000004A1  A4				movsb
 000004A2  4F				dec edi
 000004A3  E2 FB			loop next10
 000004A5  EB 0A			jmp createnewfile

 000004A7			dvabajta:

 000004A7  D1 E9			shr ecx,1

 000004A9			next1:
 000004A9  4F				dec edi
 000004AA  4F				dec edi
 000004AB  A4				movsb
 000004AC  A4				movsb
 000004AD  4F				dec edi
 000004AE  4F				dec edi
 000004AF  E2 F8			loop next1


 000004B1				createnewfile:


					;Kreiranje izlaznog fajla

 000004B1  33 D2			xor edx,edx
 000004B3  BA 0056FA1D R		mov	edx,OFFSET dstFilename
 000004B8  E8 00000000 E		call	CreateOutputFile
 000004BD  A3 0056FA6D R		mov	fileHandle,eax


					;Ispisivanje bafera2 u izlazni fajl

 000004C2  A1 0056FA6D R		mov	eax,fileHandle
 000004C7  BA 002B7CDE R		mov	edx,OFFSET buffer2
 000004CC  B9 002B7CD0			mov	ecx,LENGTHOF buffer2
 000004D1  E8 00000000 E		call	WriteToFile


 000004D6			quit:
				exit
 000004D6  6A 00	   *	    push   +000000000h
 000004D8  E8 00000000 E   *	    call   ExitProcess

 000004DD			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.24218.2	    06/25/17 20:45:21
AddTwo.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0056FDF8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004DD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000004DD Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 00000040 _TEXT	
  check_buffer_size  . . . . . .	L Near	 00000064 _TEXT	
  buf_size_ok  . . . . . . . . .	L Near	 0000007C _TEXT	
  close_file . . . . . . . . . .	L Near	 00000099 _TEXT	
  sledeci  . . . . . . . . . . .	L Near	 000000DD _TEXT	
  gotovo . . . . . . . . . . . .	L Near	 000000FC _TEXT	
  ispocetka  . . . . . . . . . .	L Near	 00000157 _TEXT	
  next . . . . . . . . . . . . .	L Near	 00000177 _TEXT	
  dalje  . . . . . . . . . . . .	L Near	 000001A9 _TEXT	
  deo_pesme  . . . . . . . . . .	L Near	 000001BA _TEXT	
  ispis_minuta . . . . . . . . .	L Near	 000001CB _TEXT	
  ispis_do_manje_nego_od . . . .	L Near	 000001D9 _TEXT	
  dalje_4  . . . . . . . . . . .	L Near	 000001E7 _TEXT	
  ispis_minuta1  . . . . . . . .	L Near	 00000204 _TEXT	
  ispis_sekundi  . . . . . . . .	L Near	 00000234 _TEXT	
  ispis_sekundi1 . . . . . . . .	L Near	 00000251 _TEXT	
  sabiranje  . . . . . . . . . .	L Near	 00000281 _TEXT	
  deo_pesme1 . . . . . . . . . .	L Near	 000002A3 _TEXT	
  ispis_minuta3  . . . . . . . .	L Near	 000002B4 _TEXT	
  ispis_minuta2  . . . . . . . .	L Near	 000002D1 _TEXT	
  ispis_sekundi3 . . . . . . . .	L Near	 00000301 _TEXT	
  ispis_sekundi2 . . . . . . . .	L Near	 0000031E _TEXT	
  sabiranje1 . . . . . . . . . .	L Near	 0000034E _TEXT	
  kraj2  . . . . . . . . . . . .	L Near	 00000370 _TEXT	
  kraj1  . . . . . . . . . . . .	L Near	 0000041F _TEXT	
  unos_pesme . . . . . . . . . .	L Near	 00000441 _TEXT	
  next10 . . . . . . . . . . . .	L Near	 000004A0 _TEXT	
  dvabajta . . . . . . . . . . .	L Near	 000004A7 _TEXT	
  next1  . . . . . . . . . . . .	L Near	 000004A9 _TEXT	
  createnewfile  . . . . . . . .	L Near	 000004B1 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000004D6 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0056FAA4 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0056FAC2 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0056FADF _DATA	
??0003 . . . . . . . . . . . . .	Byte	 0056FAFA _DATA	
??0004 . . . . . . . . . . . . .	Byte	 0056FB12 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0056FB2C _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0056FB54 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 0056FB83 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 0056FBC3 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 0056FBF4 _DATA	
??000A . . . . . . . . . . . . .	Byte	 0056FC44 _DATA	
??000B . . . . . . . . . . . . .	Byte	 0056FC57 _DATA	
??000C . . . . . . . . . . . . .	Byte	 0056FC94 _DATA	
??000D . . . . . . . . . . . . .	Byte	 0056FCA9 _DATA	
??000E . . . . . . . . . . . . .	Byte	 0056FCE9 _DATA	
??000F . . . . . . . . . . . . .	Byte	 0056FD39 _DATA	
??0010 . . . . . . . . . . . . .	Byte	 0056FD4C _DATA	
??0011 . . . . . . . . . . . . .	Byte	 0056FD89 _DATA	
??0012 . . . . . . . . . . . . .	Byte	 0056FD9E _DATA	
??0013 . . . . . . . . . . . . .	Byte	 0056FDAE _DATA	
??0014 . . . . . . . . . . . . .	Byte	 0056FDD3 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 002B7CD0h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bool1  . . . . . . . . . . . . .	DWord	 0056FA8D _DATA	
bool2  . . . . . . . . . . . . .	DWord	 0056FA91 _DATA	
bool3  . . . . . . . . . . . . .	DWord	 0056FA95 _DATA	
bool4  . . . . . . . . . . . . .	DWord	 0056FA99 _DATA	
bool . . . . . . . . . . . . . .	DWord	 0056FA89 _DATA	
bps  . . . . . . . . . . . . . .	Word	 0000000C _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer2  . . . . . . . . . . . .	Byte	 002B7CDE _DATA	
buffer . . . . . . . . . . . . .	Byte	 0000000E _DATA	
celapesma  . . . . . . . . . . .	Byte	 0056FA9E _DATA	
charIn . . . . . . . . . . . . .	Byte	 0056FA9D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
data_size  . . . . . . . . . . .	DWord	 00000000 _DATA	
deopesme . . . . . . . . . . . .	Byte	 0056FA9F _DATA	
dstFilename  . . . . . . . . . .	Byte	 0056FA1D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 0056FA6D _DATA	
filename . . . . . . . . . . . .	Byte	 0056F9AE _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
header_size  . . . . . . . . . .	DWord	 00000004 _DATA	
kraj . . . . . . . . . . . . . .	DWord	 0056FA85 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
minut  . . . . . . . . . . . . .	DWord	 0056FA71 _DATA	
pocetak  . . . . . . . . . . . .	DWord	 0056FA81 _DATA	
pom1 . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
pom2 . . . . . . . . . . . . . .	DWord	 0056FA09 _DATA	
pom3 . . . . . . . . . . . . . .	DWord	 0056FA0D _DATA	
pom  . . . . . . . . . . . . . .	Byte	 0056F9FE _DATA	
prviput  . . . . . . . . . . . .	DWord	 0056FAA0 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
samplerate . . . . . . . . . . .	DWord	 0056FA11 _DATA	
sekunda  . . . . . . . . . . . .	DWord	 0056FA75 _DATA	
ukupno_dob . . . . . . . . . . .	DWord	 0056FA19 _DATA	
ukupno_do  . . . . . . . . . . .	DWord	 0056FA7D _DATA	
ukupno_odb . . . . . . . . . . .	DWord	 0056FA15 _DATA	
ukupno_od  . . . . . . . . . . .	DWord	 0056FA79 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
